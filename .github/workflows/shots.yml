name: Take screenshots

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: write

jobs:
  shot-scraper:
    runs-on: ubuntu-latest
    if: ${{ github.repository != 'simonw/shot-scraper-template' }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - uses: actions/cache@v3
        name: Configure pip caching
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright/
          key: ${{ runner.os }}-browsers
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Install Playwright dependencies
        run: |
          shot-scraper install
      - name: Take shots
        run: |
          shot-scraper multi shots.yml
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./**.png
          name: shots
      - name: Process and rename files
        run: |
          python3 << 'EOF'
          import yaml
          import os
          from datetime import datetime

          # Read the shots configuration
          with open('shots.yml', 'r') as f:
              shots = yaml.safe_load(f)

          # Get today's date in YYYY-MM-DD format
          date = datetime.now().strftime('%Y-%m-%d')

          # Process each shot
          for shot in shots:
              output = shot['output']
              if os.path.exists(output):
                  # Create directory if it doesn't exist
                  dir_name = os.path.splitext(output)[0]
                  os.makedirs(dir_name, exist_ok=True)
                  # Move file to dated location
                  new_name = f"{dir_name}/{date}.png"
                  os.rename(output, new_name)
          EOF
      - name: Commit and push
        run: |-
          git config user.name "Automated"
          git config user.email "actions@users.noreply.github.com"
          git add -A
          timestamp=$(date -u)
          git commit -m "${timestamp}" || exit 0
          git pull --rebase
          git push

  # archive:
  #   needs: shot-scraper
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: shots
  #         merge-multiple: true
  #     - name: Install AWS CLI
  #       uses: unfor19/install-aws-cli-action@v1
  # - name: Archive to S3
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
  #     AWS_DEFAULT_REGION: us-east-1
  #     AWS_DEFAULT_OUTPUT: json
  #     AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
  #   run: |
  #     python3 << 'EOF'
  #     import yaml
  #     import os
  #     from datetime import datetime
  #     import subprocess

  #     # Read the shots configuration
  #     with open('shots.yml', 'r') as f:
  #         shots = yaml.safe_load(f)

  #     # Get today's date
  #     date = datetime.now().strftime('%Y-%m-%d')

  #     # Process each shot
  #     for shot in shots:
  #         output = shot['output']
  #         s3_path = shot['s3_path']
  #         if os.path.exists(output):
  #             s3_dest = f"s3://{os.environ['AWS_BUCKET']}/{s3_path}/{date}.png"
  #             subprocess.run(['aws', 's3', 'cp', output, s3_dest], check=True)
  #     EOF
